#!/bin/bash

db_host='127.0.0.1'
db_port=3307
db_user='root'
db_password='abcd6789'
db_name='bash'
backup_save_path='/home/backups'



echo "-------$(date +%Y-%m-%d-%H:%M:%S)------" 

today=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() " | sed -n '2p'` 
three_days_ago=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() - INTERVAL 3 DAY;" | sed -n '2p'` 


echo "today: $today"
echo "3_days_ago : $three_days_ago"

echo " 
Tables whose creation date is before $three_days_ago 
They will be backed up first (with mysqldump method)
and then compress that backup file ( with gzip method )
and this file saved in $backup_save_path
Then that table are deleted from database"

echo "  "


echo "this script contain commands that need to root priviledge to exuecute properly .
check script executed with root priviledge or not  ... "

if [[ "$(whoami)" != "root" ]]; then
    echo  "script executed without root priviledge"
    exit 2
else
    echo "script executed with root priviledge "
fi

echo "  "


echo "Creating the folder where the backups are going to be kept on that mean $backup_save_path"
echo "check folder creation is successful or not .... "

backup_save_path='/home/backups'

mkdir -p $backup_save_path

if [ $? -eq 0 ]; then
	echo “folder created successfully”
else
    echo “cant create folder ” 
fi


echo "fetching the names of all tables that 
Their name is a pattern similar to a1.date"


#We will need this array in the future
#We will iterate over this array 
#and We will filter members of this array whose value  a date that is older than 3 days ago
#now table_names is array
all_table_names=(`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "USE bash;SHOW TABLES LIKE 'a1_logs_%';" | grep a1 | grep -v bash`)
#echo ${table_names[@]};



all_table_names=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "USE bash;SHOW TABLES LIKE 'a1_logs_%';" | grep a1 | grep -v bash`
#echo ${PIPESTATUS[@]}adf



if [ $? -eq 0 ]; then
	echo “table names fetched successfully”
else
	echo “table name fetchind failed”
    exit 2;
fi

echo ${all_table_names[@]};




///////////////////////////////////////////

        echo "Taking a backup of a table named $single_table_name and then compress it "

        mysqldump -P $db_port -h $db_host --user=$db_user --password=$db_password $db_name $single_table_name | gzip -c > $backup_save_path/$backup_file_name;

        if [ $? -eq 0 ]; then
	        echo “The backup and compression process was done successfully”
        else
        	echo “The backup or compression process failed”
            exit 2;
        fi
 
        echo "drop table: $single_table_name (of course . after taking a backup from that)."
        mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "use $db_name;DROP TABLE IF EXISTS $single_table_name;"

        if [ $? -eq 0 ]; then
	        echo “The drop process was done successfully”
        else
        	echo “The drop process failed”
            exit 2;
        fi


////////////////////////////////////////////////////////////////


for single_table_name in "${all_table_names[@]}"
do
    #create a variable that  just contain  date section of table names ( we are cutting a1_logs section of table names)
    #Note that we have not changed the names of the actual tables in database

    #convert a1_logs_20240527 to 20240527
    date_section_in_table_name=`echo $single_table_name | awk -F"_" '{ print $3 }'`

    #convert 20240527 to 20240527.sql.gz
    backup_file_name=$single_table_name".sql.gz"


    #Comparing the date part of "each table name"   with the  3 days ago date
    #With this method, we can find the tables whose creation date is before 3 days ago 
    #and perform the necessary actions on these tables

    if [[ $three_days_ago_days_ago  -gt $date_section_in_table_name ]]; then

        echo 'vay'

    fi

done


*/////////////////////////////////////**********//////////


seven_days_ago=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() - INTERVAL 3 DAY;" | sed -n '2p'` 
three_days_ago=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() - INTERVAL 3 DAY;" | sed -n '2p'` 

seven_days_ago=`date -d $seven_days_ago +'%Y%m%d'`
three_days_ago=`date -d $three_days_ago +'%Y%m%d'`

//////////////////////////////////////////////////////////////////////////


#!/bin/bash

db_host='127.0.0.1'
db_port=3307
db_user='root'
db_password='abcd6789'
db_name='bash'




echo "-------$(date +%Y-%m-%d-%H:%M:%S)------" 

#calculate today date

#output of below command without pipe ---> 
# line1: CURDATE() - INTERVAL 3 DAY 
# line2:2024-06-18
today=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() " | sed -n '2p'` 




#calculate 3 days ago time
#output of above command after pipe ---> 2024-06-18

three_days_ago=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "SELECT CURDATE() - INTERVAL 3 DAY;" | sed -n '2p'` 


echo "today: $today"
echo "3_days_ago : $three_days_ago"

echo " 
Tables whose creation date is before $three_days_ago 
They will be backed up first (with mysqldump method)
and then compress that backup file ( with gzip method )
and this file saved in $backup_save_path
Then that table are deleted from database"

echo "  "


echo "this script contain commands that need to root priviledge to exuecute properly .
check script executed with root priviledge or not  ... "

if [[ "$(whoami)" != "root" ]]; then
    echo  "script executed without root priviledge"
    exit 2
else
    echo "script executed with root priviledge "
fi

echo "  "


echo "Creating the folder where the backups are going to be kept on that . mean $backup_save_path"
echo "check folder creation is successful or not .... "

backup_save_path='/home/backups'

mkdir -p $backup_save_path

if [ $? -eq 0 ]; then
	echo “folder created successfully”
else
    echo “cant create folder ” 
fi

echo "  "

echo "fetching the names of all tables that 
Their name is a pattern similar to a1_logs_%"


#We will need this array in the future
#We will iterate over this array 
#and We will filter members of this array whose value  a date that is older than 3 days ago
#now table_names is array
all_table_names=`mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "USE bash;SHOW TABLES LIKE 'a1_logs_%';" | grep a1 | grep -v bash`



if [ $? -eq 0 ]; then
	echo “table names fetched successfully”
else
	echo “table name fetchind failed”
    exit 2;
fi



echo "  "


#convert 2024-06-18 to 20240618
three_days_ago=`date -d $three_days_ago +'%Y%m%d'`


#' We will filter members of this array($all_table_names)
#whose members have a value equal to
#a date
#that is older than 3 days ago'


for single_table_name in "${all_table_names[@]}"
do
    #convert a1_logs_20240527 to 20240527
    date_section_in_table_name=`echo $single_table_name | awk -F"_" '{ print $3 }'`

    backup_file_name=$single_table_name".sql.gz"


    if [ $three_days_ago  -gt $date_section_in_table_name ]; then

        mysqldump -P $db_port -h $db_host --user=$db_user --password=$db_password $db_name $single_table_name | gzip -c > $backup_save_path/$backup_file_name;
        
        mysql -u $db_user -P $db_port -p$db_password -h $db_host -e "use $db_name;DROP TABLE IF EXISTS $single_table_name;"
    fi

done
